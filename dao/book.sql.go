// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: book.sql

package dao

import (
	"context"
)

const getBooks = `-- name: GetBooks :many
select id, author_id, title, description from book
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
select id, author_id, title, description from book where author_id = ?
`

func (q *Queries) GetBooksByAuthor(ctx context.Context, authorID int64) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
